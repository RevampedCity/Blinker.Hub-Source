-- Insane GUI Library Base for Roblox
-- Supports Tabs, Sections, and controls (Toggle, Slider, Button, Dropdown, Textbox)

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local Library = {}

-- Theme/colors (customize!)
Library.Theme = {
    Background = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(85, 170, 255),
    TextColor = Color3.fromRGB(230, 230, 230),
    SectionBackground = Color3.fromRGB(40, 40, 45),
    ToggleOn = Color3.fromRGB(85, 170, 255),
    ToggleOff = Color3.fromRGB(80, 80, 80),
    Hover = Color3.fromRGB(100, 100, 110),
}

-- Create main GUI elements
function Library:CreateWindow(title)
    local window = Instance.new("ScreenGui")
    window.Name = title or "InsaneGUI"
    window.ResetOnSpawn = false

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 500, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
    mainFrame.BackgroundColor3 = self.Theme.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = window
    mainFrame.ClipsDescendants = true
    mainFrame.Name = "MainFrame"

    -- Make draggable
    self:MakeDraggable(mainFrame)

    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = self.Theme.SectionBackground
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Text = title or "Insane GUI"
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.TextColor3 = self.Theme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Size = UDim2.new(1, -40, 1, 0)
    titleLabel.Parent = titleBar

    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Text = "X"
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = 18
    closeButton.TextColor3 = self.Theme.TextColor
    closeButton.BackgroundColor3 = Color3.new(0,0,0)
    closeButton.BackgroundTransparency = 0.8
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Parent = titleBar

    closeButton.MouseEnter:Connect(function()
        closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    end)
    closeButton.MouseLeave:Connect(function()
        closeButton.BackgroundColor3 = Color3.new(0,0,0)
    end)
    closeButton.MouseButton1Click:Connect(function()
        window:Destroy()
    end)

    -- Tabs container
    local tabsFrame = Instance.new("Frame")
    tabsFrame.Size = UDim2.new(1, 0, 0, 30)
    tabsFrame.Position = UDim2.new(0, 0, 0, 30)
    tabsFrame.BackgroundColor3 = self.Theme.SectionBackground
    tabsFrame.Parent = mainFrame
    tabsFrame.Name = "TabsFrame"

    -- Content container (where tab content goes)
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, -60)
    contentFrame.Position = UDim2.new(0, 0, 0, 60)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    contentFrame.Name = "ContentFrame"

    window.Parent = game:GetService("CoreGui")

    local tabs = {}
    local currentTab = nil

    -- Tab creation function
    function window:AddTab(tabName)
        local tabButton = Instance.new("TextButton")
        tabButton.Text = tabName
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextSize = 16
        tabButton.BackgroundColor3 = self.Theme.SectionBackground
        tabButton.TextColor3 = self.Theme.TextColor
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.Parent = tabsFrame

        -- Position buttons side by side
        tabButton.Position = UDim2.new(0, (#tabs)*100, 0, 0)

        -- Content frame for tab
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.Position = UDim2.new(0, 0, 0, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.CanvasSize = UDim2.new(0, 0, 5, 0) -- big canvas for scrolling
        tabContent.ScrollBarThickness = 5
        tabContent.Parent = contentFrame
        tabContent.Visible = false

        tabs[tabName] = {
            Button = tabButton,
            Content = tabContent,
            Sections = {},
        }

        -- On tab click, show content and update button colors
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                tabs[currentTab].Content.Visible = false
                tabs[currentTab].Button.BackgroundColor3 = self.Theme.SectionBackground
            end
            currentTab = tabName
            tabs[tabName].Content.Visible = true
            tabs[tabName].Button.BackgroundColor3 = self.Theme.Accent
        end)

        -- If first tab, auto select
        if not currentTab then
            currentTab = tabName
            tabContent.Visible = true
            tabButton.BackgroundColor3 = self.Theme.Accent
        end

        -- Section creation within tab
        function tabs[tabName]:AddSection(sectionName)
            local sectionFrame = Instance.new("Frame")
            sectionFrame.Size = UDim2.new(1, -20, 0, 150)
            sectionFrame.Position = UDim2.new(0, 10, 0, #self.Sections * 160)
            sectionFrame.BackgroundColor3 = Library.Theme.SectionBackground
            sectionFrame.Parent = tabContent
            sectionFrame.Name = "Section_" .. sectionName

            local sectionTitle = Instance.new("TextLabel")
            sectionTitle.Text = sectionName
            sectionTitle.Font = Enum.Font.GothamBold
            sectionTitle.TextSize = 16
            sectionTitle.TextColor3 = Library.Theme.TextColor
            sectionTitle.BackgroundTransparency = 1
            sectionTitle.Size = UDim2.new(1, 0, 0, 25)
            sectionTitle.Parent = sectionFrame

            local section = {
                Frame = sectionFrame,
                Items = {},
                LayoutOrder = #self.Sections + 1,
                NextItemY = 30,
            }

            function section:AddToggle(name, default, callback)
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1, 0, 0, 30)
                toggleFrame.Position = UDim2.new(0, 0, 0, section.NextItemY)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = sectionFrame

                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Text = name
                toggleLabel.Font = Enum.Font.Gotham
                toggleLabel.TextSize = 14
                toggleLabel.TextColor3 = Library.Theme.TextColor
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Position = UDim2.new(0, 5, 0, 0)
                toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                toggleLabel.Parent = toggleFrame

                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(0, 50, 0, 20)
                toggleButton.Position = UDim2.new(1, -55, 0, 5)
                toggleButton.Text = ""
                toggleButton.BackgroundColor3 = default and Library.Theme.ToggleOn or Library.Theme.ToggleOff
                toggleButton.Parent = toggleFrame
                toggleButton.AutoButtonColor = false
                toggleButton.Name = "ToggleButton"

                local toggled = default

                toggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    toggleButton.BackgroundColor3 = toggled and Library.Theme.ToggleOn or Library.Theme.ToggleOff
                    if callback then
                        callback(toggled)
                    end
                end)

                section.NextItemY = section.NextItemY + 35

                return {
                    Set = function(state)
                        toggled = state
                        toggleButton.BackgroundColor3 = toggled and Library.Theme.ToggleOn or Library.Theme.ToggleOff
                        if callback then
                            callback(toggled)
                        end
                    end,
                    Get = function() return toggled end
                }
            end

            -- More UI elements like Slider, Button, Dropdown, Textbox can be added here similarly

            table.insert(self.Sections, section)
            return section
        end

        return tabs[tabName]
    end

    return window
end

-- Helper: Make frame draggable
function Library:MakeDraggable(frame)
    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                   startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

return Library
